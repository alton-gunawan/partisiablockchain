use std::fmt::Debug;

use super::WriteInt;

fn assert_val<T: Eq + Debug>(
    expected: Vec<u8>,
    func: fn(&mut Vec<u8>, T) -> std::io::Result<()>,
    value: T,
) {
    let mut vec = Vec::new();
    func(&mut vec, value).unwrap();
    assert_eq!(vec, expected);
}

fn assert_u8(value: u8, expected: Vec<u8>) {
    assert_val(expected, WriteInt::write_u8, value);
}

fn assert_i8(value: i8, expected: Vec<u8>) {
    assert_val(expected, WriteInt::write_i8, value);
}

fn assert_u16(value: u16, expected: Vec<u8>) {
    assert_val(expected, WriteInt::write_u16_be, value);
}

fn assert_i16(value: i16, expected: Vec<u8>) {
    assert_val(expected, WriteInt::write_i16_be, value);
}

fn assert_u32(value: u32, expected: Vec<u8>) {
    assert_val(expected, WriteInt::write_u32_be, value);
}

fn assert_i32(value: i32, expected: Vec<u8>) {
    assert_val(expected, WriteInt::write_i32_be, value);
}

fn assert_u64(value: u64, expected: Vec<u8>) {
    assert_val(expected, WriteInt::write_u64_be, value);
}

fn assert_i64(value: i64, expected: Vec<u8>) {
    assert_val(expected, WriteInt::write_i64_be, value);
}

fn assert_u128(value: u128, expected: Vec<u8>) {
    assert_val(expected, WriteInt::write_u128_be, value);
}

fn assert_i128(value: i128, expected: Vec<u8>) {
    assert_val(expected, WriteInt::write_i128_be, value);
}

#[test]
pub fn write_u8() {
    for i in 0..255u8 {
        assert_u8(i, vec![i]);
    }

    assert_u8(0, vec![0x00]);
    assert_u8(1, vec![0x01]);
    assert_u8(255, vec![0xFF]);
}

#[test]
pub fn write_i8() {
    assert_i8(0, vec![0]);
    assert_i8(1, vec![1]);
    assert_i8(127, vec![127]);
    assert_i8(-128, vec![128]);
    assert_i8(-1, vec![255]);
}

#[test]
pub fn write_u16() {
    assert_u16(1, vec![0x00, 0x01]);
    assert_u16(257, vec![0x01, 0x01]);
    assert_u16(65281, vec![0xFF, 0x01]);
    assert_u16(511, vec![0x01, 0xFF]);
    assert_u16(65535, vec![0xFF, 0xFF]);
}

#[test]
pub fn write_i16() {
    assert_i16(1, vec![0x00, 0x01]);
    assert_i16(257, vec![0x01, 0x01]);
    assert_i16(-255, vec![0xFF, 0x01]);
    assert_i16(511, vec![0x01, 0xFF]);
    assert_i16(-1, vec![0xFF, 0xFF]);

    assert_i16(i16::MIN, vec![0x80, 0x00]);
    assert_i16(i16::MAX, vec![0x7F, 0xFF]);
}

#[test]
pub fn write_u32() {
    assert_u32(0x00000001, vec![0x00, 0x00, 0x00, 0x01]);
    assert_u32(0x00000101, vec![0x00, 0x00, 0x01, 0x01]);
    assert_u32(0x00010101, vec![0x00, 0x01, 0x01, 0x01]);
    assert_u32(0x01010101, vec![0x01, 0x01, 0x01, 0x01]);
    assert_u32(0xF7FFFFFF, vec![0xF7, 0xFF, 0xFF, 0xFF]);
    assert_u32(0xFFFFFFFF, vec![0xFF, 0xFF, 0xFF, 0xFF]);
}

#[test]
pub fn write_i32() {
    assert_i32(0x00000001, vec![0x00, 0x00, 0x00, 0x01]);
    assert_i32(0x00000101, vec![0x00, 0x00, 0x01, 0x01]);
    assert_i32(0x00010101, vec![0x00, 0x01, 0x01, 0x01]);
    assert_i32(0x01010101, vec![0x01, 0x01, 0x01, 0x01]);

    assert_i32(-134217729, vec![0xF7, 0xFF, 0xFF, 0xFF]);
    assert_i32(-1, vec![0xFF, 0xFF, 0xFF, 0xFF]);

    assert_i32(i32::MIN, vec![0x80, 0x00, 0x00, 0x00]);
    assert_i32(i32::MAX, vec![0x7F, 0xFF, 0xFF, 0xFF]);
}

#[test]
pub fn write_u64() {
    assert_u64(
        0x0000000000000001,
        vec![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
    );
    assert_u64(
        0x0000000000000101,
        vec![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01],
    );
    assert_u64(
        0x0000000000010101,
        vec![0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01],
    );
    assert_u64(
        0x0000000001010101,
        vec![0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01],
    );

    assert_u64(
        u64::MIN,
        vec![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    );
    assert_u64(
        u64::MAX,
        vec![0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF],
    );
}

#[test]
pub fn write_i64() {
    assert_u64(
        0x0000000000000001,
        vec![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
    );
    assert_u64(
        0x0000000000000101,
        vec![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01],
    );
    assert_u64(
        0x0000000000010101,
        vec![0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01],
    );
    assert_u64(
        0x0000000001010101,
        vec![0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01],
    );

    assert_i64(
        i64::MIN,
        vec![0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    );
    assert_i64(
        i64::MAX,
        vec![0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF],
    );
}

#[test]
pub fn write_u128() {
    assert_u128(
        0x00000000000000000000000000000001,
        vec![
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01,
        ],
    );
    assert_u128(
        0x00000000000000000000000000000101,
        vec![
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x01,
        ],
    );
    assert_u128(
        0xFF000000000000000000000000000101,
        vec![
            0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x01,
        ],
    );

    assert_u128(
        u128::MIN,
        vec![
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ],
    );

    assert_u128(
        u128::MAX,
        vec![
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF,
        ],
    );
}

#[test]
pub fn write_i128() {
    assert_i128(
        0x00000000000000000000000000000001,
        vec![
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01,
        ],
    );
    assert_i128(
        257,
        vec![
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x01,
        ],
    );
    assert_i128(
        -1329227995784915872903807060280344319,
        vec![
            0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x01,
        ],
    );

    assert_i128(
        i128::MIN,
        vec![
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ],
    );

    assert_i128(
        i128::MAX,
        vec![
            0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF,
        ],
    );
}
